@startuml class_diagram

abstract class Entity

class View
{
    '# model: Model
    + move(entity: Entity, p :Position)
    + fade(plant: Plant)
    + detect()
}

class Model
{
    # difficulty: int
    # money: int
    # time: int
    # speed: int
    # daysUntilWin: int

    # popularity: int
    # ticket: int
    # visitorsWaiting: int
    # visitorCount: int
    # jeeps: Jeep<>

    # animalCount: int
    '# animalGroup: Animal<>
    '# plants: Plant<>
    '# rangers: Ranger<>
    '# poachers: Poacher<>
    '# security: SecuritySystem<>
    
    + checkWin(dif: int)
    + checkLost()
    + paycheck()
    'decreases money for rangers to be payed
    'if there isn't enough money, remove ranger from list
    + killAnimal(animal: Animal)
    'increases money and decreases animalCount after ranger shoots an animal
}

abstract class Animal 
{
    # age: int
    # gender: int
    # hunger: int
    # thirst: int

    + Animal(...)
    + incAge()
    + assignGroup(animal: Animal)
}

abstract class AnimalGroup
{
    '# animals: Animal<>
    # places: Position<>

    # vision: int
    # femaleCount: int
    # maleCount: int
    # averageAge: double

    + mate()
    'creates a new animal and adds it to the list
    + die()
    'checks if an animal is at a dying age or hunger or thirst reach a critical level
    + decay()
    'increases hunger and thirst
    + averageAge()
    'reassigns average age 
    + eat()
    'decreases hunger
    + drink()
    'decreases thirst

}

abstract class Carnivore
abstract class Herbivore

class Herbivore1
class Herbivore2
class Carnivore1
class Carnivore2


abstract class Plant
{
    # count: int 
    + grow()
}

class Grass {}
class Bush {}
class Tree {}


class Ranger
{
    # target: Animal
    # target: Poacher

    + shoot(animal: Animal)
    + shoot(poacher: Poacher) 
}
class Poacher
{
    # target: Animal
    + shoot(animal: Animal) 
}


interface Landscape
interface Hill 
interface Water
interface River
interface Pond
class Path 
{
    waypoints: Position<>
}


class Jeep
{
    # passengers: int
    # satisfaction: int
}


abstract class SecuritySystem
{
    # range: int
}
class Camera
class Drone 
{
    # waypoints: Position<>
    # charger: Position
    # battery: int
}
class AirBalloon
{
    # waypoints: Position<>
}


Grass -up-|> Plant 
Bush -up-|> Plant 
Tree -up-|> Plant 

Carnivore -up-|> Animal
Herbivore -up-|> Animal

Herbivore1 -up-|> Herbivore
Herbivore2 -up-|> Herbivore
Carnivore1 -up-|> Carnivore
Carnivore2 -up-|> Carnivore

View -down-> Model : model
View -right->Landscape
Hill -down-|> Landscape
Water -down-|> Landscape
River -left-|> Water
Pond -right-|> Water
Path -left-|> Landscape


Model -right-> AnimalGroup : *animalGroup 0..n
Model -left-> Plant : *plants 0..n
Model -down-> Ranger : *rangers 0..n
Model -down-> Jeep : *jeeps 0..n
Model -down-> Poacher :*poachers 0..n
Model -down-> SecuritySystem : *security 0..n
AnimalGroup -right-> Animal : *animals 1..m


Ranger         -down-|> Entity
Poacher        -down-|> Entity
Jeep           -down-|> Entity
SecuritySystem -down-|> Entity
AnimalGroup    -down-|> Entity

Camera     -up-|> SecuritySystem
Drone      -up-|> SecuritySystem
AirBalloon -up-|> SecuritySystem

@enduml
